// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package generated


case class Nodes(node: generated.NodeType*)


case class Logs(log: generated.LogType*)


case class Ticket(description: String,
  typeValue: generated.TicketType,
  start: javax.xml.datatype.XMLGregorianCalendar,
  expected: javax.xml.datatype.XMLGregorianCalendar,
  finished: Option[javax.xml.datatype.XMLGregorianCalendar] = None,
  nodes: Option[generated.Nodes] = None,
  logs: Option[generated.Logs] = None,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[Int] }
  lazy val status = attributes.get("@status") map { _.as[StatusType] }
}



case class NodeType(name: String,
  severity: generated.SeverityType,
  master: Boolean,
  reason: String,
  customers: Int,
  affected: generated.AffectedType,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[Int] }
}



case class AffectedType(spid: Seq[generated.SpidType] = Nil,
  product: Seq[generated.ProductType] = Nil)


case class ProductType(value: Int,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val typeValue = attributes.get("@type") map { _.as[String] }
}



case class SpidType(value: Int,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[Int] }
}



case class LogType(text: String,
  time: javax.xml.datatype.XMLGregorianCalendar,
  typeValue: String,
  attributes: Map[String, scalaxb.DataRecord[Any]] = Map()) {
  lazy val id = attributes.get("@id") map { _.as[Int] }
}


trait StatusType

object StatusType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): StatusType = value match {
    case "open" => Open
    case "closed" => Closed

  }
}

case object Open extends StatusType { override def toString = "open" }
case object Closed extends StatusType { override def toString = "closed" }

trait TicketType

object TicketType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): TicketType = value match {
    case "acute" => Acute
    case "planned" => Planned
    case "auto" => Auto

  }
}

case object Acute extends TicketType { override def toString = "acute" }
case object Planned extends TicketType { override def toString = "planned" }
case object Auto extends TicketType { override def toString = "auto" }

trait SeverityType

object SeverityType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding): SeverityType = value match {
    case "stop" => Stop
    case "disturbance" => Disturbance
    case "info" => Info

  }
}

case object Stop extends SeverityType { override def toString = "stop" }
case object Disturbance extends SeverityType { override def toString = "disturbance" }
case object Info extends SeverityType { override def toString = "info" }

